name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  build-artifacts:
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create single header
      run: |
        chmod +x create_single_header.sh
        ./create_single_header.sh
    
    - name: Package release
      run: |
        mkdir -p ss_lib-${{ github.ref_name }}
        cp -r include/ ss_lib-${{ github.ref_name }}/
        cp -r src/ ss_lib-${{ github.ref_name }}/
        cp -r examples/ ss_lib-${{ github.ref_name }}/
        cp ss_lib_single.h ss_lib-${{ github.ref_name }}/
        cp README.md LICENSE CHANGELOG.md ss_lib-${{ github.ref_name }}/
        
    - name: Create archive (Unix)
      if: runner.os != 'Windows'
      run: tar -czf ss_lib-${{ github.ref_name }}-${{ runner.os }}.tar.gz ss_lib-${{ github.ref_name }}
    
    - name: Create archive (Windows)
      if: runner.os == 'Windows'
      run: Compress-Archive -Path ss_lib-${{ github.ref_name }} -DestinationPath ss_lib-${{ github.ref_name }}-${{ runner.os }}.zip
    
    - name: Upload Release Asset (Unix)
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./ss_lib-${{ github.ref_name }}-${{ runner.os }}.tar.gz
        asset_name: ss_lib-${{ github.ref_name }}-${{ runner.os }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Release Asset (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./ss_lib-${{ github.ref_name }}-${{ runner.os }}.zip
        asset_name: ss_lib-${{ github.ref_name }}-${{ runner.os }}.zip
        asset_content_type: application/zip